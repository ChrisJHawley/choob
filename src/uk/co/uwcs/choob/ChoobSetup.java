package uk.co.uwcs.choob;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

/**
 * Set up the database to get Choob running.
 * 
 * @author benji
 */
public class ChoobSetup
{
	private final static File BOT_CONF_EXAMPLE = new File("bot.conf.example");
	private final static File BOT_CONF = new File("bot.conf");
	private final static File MINIMAL_DATABASE_DUMP = new File(".." + File.separator + "db" + File.separator + "minimal.db");
	
	static
	{
		if (!BOT_CONF_EXAMPLE.exists())
			throw new MissingFilesError("bot.conf.example does not exist, check your source tree.");
		if (!MINIMAL_DATABASE_DUMP.exists())
			throw new MissingFilesError("minimal.db does not exist, check your source tree.");
	}
	
	
	
	private static final ParamHandler dbServer = new ParamHandler("The database server to use.","Database server must be set.");
	private static final ParamHandler dbUser = new ParamHandler("The username to use when connecting to the database server.","dbUser must be set.");
	private static final ParamHandler database = new ParamHandler("The database name.","database must be set.");
	private static final ParamHandler dbPass = new ParamHandler("The password to use when connecting to the database server.","dbPass must be set.");
	private static final ParamHandler botName = new ParamHandler("The irc nick of your bot.","botName must be set.");
	private static final ParamHandler ircServer = new ParamHandler("The irc server to connect to.","ircServer must be set.");
	private static final ParamHandler ircChannel = new ParamHandler("The irc channel(s) to connect to (comma separate)","ircChannel must be set.");
	private static final ParamHandler rootUser = new ParamHandler("The irc user to have full permissions on the bot", "rootUser must be set.");
	
	private static final Map<String, ParamHandler> params = new HashMap()
	{{
			put("dbServer",dbServer);
			put("dbUser", dbUser);
			put("database", database);
			put("dbPass",  dbPass);
			put("botName", botName);
			put("ircServer", ircServer);
			put("ircChannel", ircChannel);
			put("rootUser", rootUser);
	}};

	private static void readParams(String[] args) throws InvalidUsageException
	{
		if (args.length != params.size())
			throw new InvalidUsageException();
		
		for (String arg : args)
		{
			String[] parts = arg.split("=");
			if (parts.length != 2)
			{
				throw new InvalidUsageException("All parameters should be in the form Key=Value");
			}
			final ParamHandler ph;
			if ((ph = params.get(parts[0])) != null)
				ph.setValue(parts[1]);
			else
				throw new InvalidUsageException("Unknown parameter " + parts[0]);
		}
	}
	
	private static void printUsageAndExit(InvalidUsageException e)
	{
		System.err.println("*** WARNING: Running ChoobSetup will overwrite your bot config and database. ***");
		
		System.err.println(e.getMessage());
		System.err.println();
		System.err.print("Usage: $ ChoobSetup ");
		for (String key : params.keySet())
			System.err.print(key + "=<value> ");
		System.err.println();
		System.err.println("Where...");
		for (String key : params.keySet())
			System.err.println(key + " is " + params.get(key).getHelp());		
		System.exit(-1);
	}

	public static void main(String[] args) 
	{
		try
		{
			readParams(args);
			createBotConfFromExample();
			System.out.println("Bot config created in " + BOT_CONF.getName());
			importMinimalDatabaseDump();
			System.out.println("Database imported from " + MINIMAL_DATABASE_DUMP.getName());
			System.out.println("Choob is now ready to run.");
		} catch (InvalidUsageException e)
		{
			printUsageAndExit(e);
		} catch (IOException e)
		{
			System.err.println(e);
			e.printStackTrace();
		}catch (SQLException e)
		{
			System.err.println(e);
			e.printStackTrace();
		} catch (ClassNotFoundException e)
		{
			System.err.println(e);
			e.printStackTrace();;
		} catch (InstantiationException e)
		{
			System.err.println(e);
			e.printStackTrace();
		} catch (IllegalAccessException e)
		{
			System.err.println(e);
			e.printStackTrace();
		}
	}
	
	private static void createBotConfFromExample() throws IOException, InvalidUsageException
	{

		Properties botConfProperties = new Properties();
		botConfProperties.load(new FileInputStream(BOT_CONF_EXAMPLE));
		
		for(String str : params.keySet())
			botConfProperties.setProperty(str, params.get(str).getValue());
		
		botConfProperties.store(new FileOutputStream(BOT_CONF), "Autogenerated by ChoobSetup.");
	}
	
	private static void importMinimalDatabaseDump() throws IOException, SQLException, InvalidUsageException, ClassNotFoundException, InstantiationException, IllegalAccessException
	{
		final Connection conn = getConnection();
		createMinimalDatabaseCreationStatement(conn.createStatement()).executeBatch();
		
		PreparedStatement addUserStmt = conn.prepareStatement(ADD_USER_SQL);
		addUserStmt.setString(1, rootUser.getValue());
		addUserStmt.executeUpdate();
		
		PreparedStatement addGroupStmt = conn.prepareStatement(ADD_GROUP_SQL);
		addGroupStmt.executeUpdate();
	}
	
	private static Connection getConnection() throws IOException, SQLException, InvalidUsageException, ClassNotFoundException, InstantiationException, IllegalAccessException
	{
		final String url = "jdbc:mysql://" + dbServer.getValue() + "/" + database.getValue();
		Class.forName("com.mysql.jdbc.Driver").newInstance();
		return DriverManager.getConnection(url, dbUser.getValue(), dbPass.getValue());
	}
	
	private static Statement createMinimalDatabaseCreationStatement(Statement stmt) throws IOException, SQLException
	{
		try
		{
			StringBuilder builder = new StringBuilder();
			BufferedReader reader = new BufferedReader(new FileReader(MINIMAL_DATABASE_DUMP));
			String line;
			while ((line = reader.readLine()) != null)
			{
				line = line.replaceAll("--.*", ""); //remove comments.
				if (line.indexOf(";") != -1) //statement ends here.
				{
					builder.append("\n");
					builder.append(line);
					stmt.addBatch(builder.toString());
					builder = new StringBuilder();
				} else //statement continues
				{
					builder.append("\n");
					builder.append(line);
				}
			}
			return stmt;
		} catch (FileNotFoundException ex)
		{
			//unlikely to happen, we checked earlier.
			throw new MissingFilesError(ex.getMessage());
		}
		
	}
	
	private final static String ADD_USER_SQL = 
		"INSERT INTO " +
			"UserNodes" +
			"(" +
				"NodeName," +
				"NodeClass" +
			") " +
		"VALUES" +
			"(" +
				"?," +
				"0" +
			");";
	
	private final static String ADD_GROUP_SQL = 
		"INSERT INTO " +
			"GroupMembers " +
			"(" +
				"GroupID," +
				"MemberID" +
			") " +
		"VALUES " +
			"(" +
				"1," +
				"1" +
			");";
	
}

class InvalidUsageException extends Exception
{
	public InvalidUsageException()
	{
		super();
	}
	
	public InvalidUsageException(String message)
	{
		super(message);
	}
}

class MissingFilesError extends Error
{
	public MissingFilesError(String message)
	{
		super(message);
	}
}

class ParamHandler
{
	private String help;
	private String unsetMessage;
	private String value;
	
	public ParamHandler(final String help, final String unsetMessage)
	{
		this.help = help;
		this.unsetMessage = unsetMessage;
	}
	
	public String getHelp()
	{
		return help;
	}
	
	public String getValue() throws InvalidUsageException
	{
		if (this.value != null)
			return this.value;
		else throw new InvalidUsageException(unsetMessage);
	}
	
	public void setValue(final String value)
	{
		this.value = value;
	}
}