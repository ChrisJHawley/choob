/**
 * ChoobStatementWrapper.
 * @author James Ross
 */
package uk.co.uwcs.choob.support;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

public final class ChoobStatementWrapper implements Statement
{
	Statement stat;

	static void logSQL(final String sql) {
		System.out.println(System.currentTimeMillis() + " " + sql);
	}

	public ChoobStatementWrapper(final Statement stat) {
		this.stat = stat;
	}

	public void addBatch(final String sql) throws SQLException {
		logSQL(sql);
		stat.addBatch(sql);
	}

	public void cancel() throws SQLException {
		stat.cancel();
	}

	public void clearBatch() throws SQLException {
		stat.clearBatch();
	}

	public void clearWarnings() throws SQLException {
		stat.clearWarnings();
	}

	public void close() throws SQLException {
		stat.close();
	}

	public boolean execute(final String sql) throws SQLException {
		logSQL(sql);
		return stat.execute(sql);
	}

	public boolean execute(final String sql, final int autoGeneratedKeys) throws SQLException {
		logSQL(sql);
		return stat.execute(sql, autoGeneratedKeys);
	}

	public boolean execute(final String sql, final int[] columnIndexes) throws SQLException {
		logSQL(sql);
		return stat.execute(sql, columnIndexes);
	}

	public boolean execute(final String sql, final String[] columnNames) throws SQLException {
		logSQL(sql);
		return stat.execute(sql, columnNames);
	}

	public int[] executeBatch() throws SQLException {
		return stat.executeBatch();
	}

	public ResultSet executeQuery(final String sql) throws SQLException {
		logSQL(sql);
		return stat.executeQuery(sql);
	}

	public int executeUpdate(final String sql) throws SQLException {
		logSQL(sql);
		return stat.executeUpdate(sql);
	}

	public int executeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException {
		logSQL(sql);
		return stat.executeUpdate(sql, autoGeneratedKeys);
	}

	public int executeUpdate(final String sql, final int[] columnIndexes) throws SQLException {
		logSQL(sql);
		return stat.executeUpdate(sql, columnIndexes);
	}

	public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {
		logSQL(sql);
		return stat.executeUpdate(sql, columnNames);
	}

	public Connection getConnection() throws SQLException {
		return stat.getConnection();
	}

	public int getFetchDirection() throws SQLException {
		return stat.getFetchDirection();
	}

	public int getFetchSize() throws SQLException {
		return stat.getFetchSize();
	}

	public ResultSet getGeneratedKeys() throws SQLException {
		return stat.getGeneratedKeys();
	}

	public int getMaxFieldSize() throws SQLException {
		return stat.getMaxFieldSize();
	}

	public int getMaxRows() throws SQLException {
		return stat.getMaxRows();
	}

	public boolean getMoreResults() throws SQLException {
		return stat.getMoreResults();
	}

	public boolean getMoreResults(final int current) throws SQLException {
		return stat.getMoreResults(current);
	}

	public int getQueryTimeout() throws SQLException {
		return stat.getQueryTimeout();
	}

	public ResultSet getResultSet() throws SQLException {
		return stat.getResultSet();
	}

	public int getResultSetConcurrency() throws SQLException {
		return stat.getResultSetConcurrency();
	}

	public int getResultSetHoldability() throws SQLException {
		return stat.getResultSetHoldability();
	}

	public int getResultSetType() throws SQLException {
		return stat.getResultSetType();
	}

	public int getUpdateCount() throws SQLException {
		return stat.getUpdateCount();
	}

	public SQLWarning getWarnings() throws SQLException {
		return stat.getWarnings();
	}

	public boolean isClosed() throws SQLException {
		return stat.isClosed();
	}

	public boolean isPoolable() throws SQLException {
		return stat.isPoolable();
	}

	public boolean isWrapperFor(final Class<?> iface) throws SQLException {
		return stat.isWrapperFor(iface);
	}

	public void setCursorName(final String name) throws SQLException {
		stat.setCursorName(name);
	}

	public void setEscapeProcessing(final boolean enable) throws SQLException {
		stat.setEscapeProcessing(enable);
	}

	public void setFetchDirection(final int direction) throws SQLException {
		stat.setFetchDirection(direction);
	}

	public void setFetchSize(final int rows) throws SQLException {
		stat.setFetchSize(rows);
	}

	public void setMaxFieldSize(final int max) throws SQLException {
		stat.setMaxFieldSize(max);
	}

	public void setMaxRows(final int max) throws SQLException {
		stat.setMaxRows(max);
	}

	public void setPoolable(final boolean poolable) throws SQLException {
		stat.setPoolable(poolable);
	}

	public void setQueryTimeout(final int seconds) throws SQLException {
		stat.setQueryTimeout(seconds);
	}

	public <T> T unwrap(final Class<T> iface) throws SQLException {
		return stat.unwrap(iface);
	}
}
