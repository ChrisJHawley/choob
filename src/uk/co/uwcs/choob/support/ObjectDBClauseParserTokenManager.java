/* Generated By:JJTree&JavaCC: Do not edit this line. ObjectDBClauseParserTokenManager.java */
package uk.co.uwcs.choob.support;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.io.StringReader;

public class ObjectDBClauseParserTokenManager implements ObjectDBClauseParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 52;
            return 49;
         }
         if ((active0 & 0x2c00010050000L) != 0L)
         {
            jjmatchedKind = 52;
            return 75;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 23;
            return -1;
         }
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 52;
            return 29;
         }
         if ((active0 & 0x40000000000L) != 0L)
            return 123;
         if ((active0 & 0x300024000L) != 0L)
         {
            jjmatchedKind = 52;
            return 5;
         }
         if ((active0 & 0x1048010ba00L) != 0L)
         {
            jjmatchedKind = 52;
            return 124;
         }
         return -1;
      case 1:
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x40000000L) != 0L)
            return 50;
         if ((active0 & 0x1079017fa00L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
            return 124;
         }
         if ((active0 & 0x2c00000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
            return 74;
         }
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
            return 28;
         }
         return -1;
      case 2:
         if ((active0 & 0x2c106901fba00L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 2;
            return 124;
         }
         if ((active0 & 0x100004000L) != 0L)
            return 124;
         return -1;
      case 3:
         if ((active0 & 0x10000013000L) != 0L)
            return 124;
         if ((active0 & 0x2c006901e8a00L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 3;
            return 124;
         }
         return -1;
      case 4:
         if ((active0 & 0x28006101e0000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 4;
            return 124;
         }
         if ((active0 & 0x400080008a00L) != 0L)
            return 124;
         return -1;
      case 5:
         if ((active0 & 0x800210000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 5;
            return 124;
         }
         if ((active0 & 0x20004001e0000L) != 0L)
            return 124;
         return -1;
      case 6:
         if ((active0 & 0x800010000000L) != 0L)
            return 124;
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 6;
            return 124;
         }
         return -1;
      case 7:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 7;
            return 124;
         }
         return -1;
      case 8:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 8;
            return 124;
         }
         return -1;
      case 9:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 9;
            return 124;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 40:
         return jjStopAtPos(0, 21);
      case 41:
         return jjStopAtPos(0, 22);
      case 42:
         return jjStopAtPos(0, 43);
      case 43:
         return jjStopAtPos(0, 41);
      case 44:
         return jjStopAtPos(0, 45);
      case 45:
         return jjStartNfaWithStates_0(0, 42, 123);
      case 47:
         return jjStopAtPos(0, 44);
      case 60:
         return jjStopAtPos(0, 35);
      case 61:
         return jjStopAtPos(0, 37);
      case 62:
         return jjStopAtPos(0, 36);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x480000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x2c00010050000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x10000000800L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x300024000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1200L);
      default :
         return jjMoveNfa_0(6, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xa4000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000001800L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x10050000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x480000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x200100000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 83:
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(1, 30, 50);
         return jjMoveStringLiteralDfa2_0(active0, 0x2c00000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000008000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0xa0000L);
      case 77:
      case 109:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 124);
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 84:
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 124);
         return jjMoveStringLiteralDfa3_0(active0, 0x10011000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 69:
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 124);
         return jjMoveStringLiteralDfa4_0(active0, 0x100e0000L);
      case 72:
      case 104:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 124);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000008000L);
      case 77:
      case 109:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 124);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x400080000000L);
      case 79:
      case 111:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 124);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x600000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 69:
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 124);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 124);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x2800000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 84:
      case 116:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 124);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 124);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 124);
         return jjMoveStringLiteralDfa5_0(active0, 0x180000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L);
      case 69:
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 124);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 124);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 76:
      case 108:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 124);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      case 84:
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 124);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 124);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 124);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 82:
      case 114:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 124);
         break;
      case 84:
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 124);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 71:
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 71:
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(10, 33, 124);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 123;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAddTwoStates(67, 68);
                  }
                  else if (curChar == 46)
                     jjAddStates(0, 1);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAddStates(2, 4);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(100, 103);
                  else if (curChar == 39)
                     jjCheckNAddStates(5, 7);
                  else if (curChar == 34)
                     jjCheckNAddStates(8, 10);
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 33)
                  {
                     if (kind > 23)
                        kind = 23;
                  }
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAddTwoStates(67, 68);
                  }
                  else if (curChar == 46)
                     jjAddStates(0, 1);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAddTwoStates(67, 68);
                  }
                  else if (curChar == 46)
                     jjAddStates(0, 1);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAddTwoStates(67, 68);
                  }
                  else if (curChar == 46)
                     jjAddStates(0, 1);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAddTwoStates(67, 68);
                  }
                  else if (curChar == 46)
                     jjAddStates(0, 1);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 123:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(103);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(100, 101);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAddTwoStates(67, 68);
                  }
                  else if (curChar == 46)
                     jjAddStates(0, 1);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAddTwoStates(67, 68);
                  }
                  else if (curChar == 46)
                     jjAddStates(0, 1);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAddTwoStates(67, 68);
                  }
                  else if (curChar == 46)
                     jjAddStates(0, 1);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 3:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 7:
                  if (curChar == 33 && kind > 23)
                     kind = 23;
                  break;
               case 11:
                  if (curChar == 38 && kind > 24)
                     kind = 24;
                  break;
               case 12:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 16:
                  if (curChar == 34)
                     jjCheckNAddStates(8, 10);
                  break;
               case 17:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 19:
                  jjCheckNAddStates(8, 10);
                  break;
               case 20:
                  if (curChar == 34 && kind > 54)
                     kind = 54;
                  break;
               case 21:
                  if (curChar == 39)
                     jjCheckNAddStates(5, 7);
                  break;
               case 22:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 24:
                  jjCheckNAddStates(5, 7);
                  break;
               case 25:
                  if (curChar == 39 && kind > 54)
                     kind = 54;
                  break;
               case 42:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 62:
                  if (curChar == 46)
                     jjAddStates(0, 1);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(64, 62);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddTwoStates(67, 68);
                  break;
               case 68:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddTwoStates(68, 70);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(85, 86);
                  break;
               case 86:
                  if (curChar == 46)
                     jjAddStates(11, 12);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(88, 86);
                  break;
               case 90:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 95:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 99:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(100, 103);
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(100, 101);
                  break;
               case 101:
                  if (curChar == 46)
                     jjCheckNAdd(102);
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(102);
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(103);
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddStates(2, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAddTwoStates(67, 68);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  if ((0x800000008L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  break;
               case 6:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAddStates(19, 22);
                  }
                  else if (curChar == 96)
                     jjAddStates(23, 25);
                  else if (curChar == 126)
                  {
                     if (kind > 39)
                        kind = 39;
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 13;
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(26, 29);
                  else if ((0x20000000200L & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  else if ((0x200000002L & l) != 0L)
                     jjAddStates(33, 35);
                  else if ((0x800000008000L & l) != 0L)
                     jjAddStates(36, 37);
                  else if ((0x1000000010L & l) != 0L)
                     jjAddStates(38, 39);
                  else if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAddTwoStates(67, 68);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 75:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAddTwoStates(67, 68);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0x1000000010L & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                  }
                  else if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAddTwoStates(67, 68);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 74:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAddTwoStates(67, 68);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAddTwoStates(67, 68);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  else if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 28:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAddTwoStates(67, 68);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 124:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAddTwoStates(67, 68);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 0:
                  if ((0x10000000100000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 1:
                  if ((0x200000002000000L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 2:
               case 41:
                  if ((0x400000004L & l) != 0L)
                     jjCheckNAdd(1);
                  break;
               case 4:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 8:
                  if ((0x10000000100000L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 9:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 13:
                  if (curChar == 124 && kind > 25)
                     kind = 25;
                  break;
               case 14:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 126 && kind > 39)
                     kind = 39;
                  break;
               case 17:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 18:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  jjCheckNAddStates(8, 10);
                  break;
               case 22:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 23:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  jjCheckNAddStates(5, 7);
                  break;
               case 26:
                  if ((0x1000000010L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 27:
                  if ((0x800000008L & l) != 0L && kind > 27)
                     kind = 27;
                  break;
               case 30:
                  if ((0x8000000080L & l) != 0L && kind > 27)
                     kind = 27;
                  break;
               case 31:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0x800000008000L & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               case 40:
                  if ((0x4000000040000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 43:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 44:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if ((0x4000000040000L & l) != 0L && kind > 25)
                     kind = 25;
                  break;
               case 47:
                  if ((0x200000002L & l) != 0L)
                     jjAddStates(33, 35);
                  break;
               case 48:
                  if ((0x1000000010L & l) != 0L && kind > 24)
                     kind = 24;
                  break;
               case 51:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x8000000080L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 53:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddStates(19, 22);
                  break;
               case 61:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 63:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(64, 62);
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(64, 62);
                  break;
               case 65:
                  if ((0x1000000010L & l) != 0L && kind > 50)
                     kind = 50;
                  break;
               case 66:
                  if ((0x20000000200L & l) != 0L)
                     jjCheckNAdd(65);
                  break;
               case 67:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddTwoStates(67, 68);
                  break;
               case 69:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddTwoStates(68, 70);
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddTwoStates(68, 70);
                  break;
               case 71:
                  if ((0x20000000200L & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 72:
                  if ((0x4000000040000L & l) != 0L && kind > 48)
                     kind = 48;
                  break;
               case 73:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 76:
                  if ((0x8000000080L & l) != 0L && kind > 48)
                     kind = 48;
                  break;
               case 77:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 96)
                     jjAddStates(23, 25);
                  break;
               case 84:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(85, 86);
                  break;
               case 85:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(85, 86);
                  break;
               case 87:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(88, 86);
                  break;
               case 88:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(88, 86);
                  break;
               case 89:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 91:
                  if (curChar == 96 && kind > 51)
                     kind = 51;
                  break;
               case 92:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 93:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 94:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 96:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 97:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 98:
                  if (curChar == 96 && kind > 53)
                     kind = 53;
                  break;
               case 105:
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(26, 29);
                  break;
               case 106:
                  if ((0x200000002000L & l) != 0L && kind > 29)
                     kind = 29;
                  break;
               case 107:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if ((0x1000000010L & l) != 0L && kind > 29)
                     kind = 29;
                  break;
               case 112:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if ((0x2000000020L & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 115:
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if ((0x1000000010000L & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 119:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 17:
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(8, 10);
                  break;
               case 22:
               case 24:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(5, 7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 123 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   63, 66, 100, 101, 103, 22, 23, 25, 17, 18, 20, 87, 92, 94, 95, 98, 
   95, 97, 98, 61, 67, 68, 62, 84, 92, 93, 110, 113, 117, 122, 75, 82, 
   65, 49, 51, 59, 45, 46, 29, 38, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\50", "\51", null, null, null, null, 
null, null, null, null, null, null, null, null, "\74", "\76", "\75", "\41\75", null, 
null, "\53", "\55", "\52", "\57", "\54", null, null, null, null, null, null, null, 
null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x1fffffffffffe01L, 
};
static final long[] jjtoSkip = {
   0xeL, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[123];
private final int[] jjstateSet = new int[246];
protected char curChar;
public ObjectDBClauseParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public ObjectDBClauseParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 123; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
