package uk.co.uwcs.choob;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

/**
 * Sets up a minimal fresh instance of the bot
 *
 * @author benji
 */
public class ChoobSetup
{
	private final String databaseServer;
	private final String databaseUserName;
	private final String databasePassword;
	private final String databaseName;
	private final String botName;
	private final String ircServer;
	private final String ircChannel;
	private final String rootUser;

	private final InputStream BOT_CONF_EXAMPLE = ChoobSetup.class.getResourceAsStream("/template/bot.conf.example");
	private final File BOT_CONF = new File("bot.conf");
	private static final String DATABASE_DUMP_NAME = "/template/minimal.sql";
	private final InputStream MINIMAL_DATABASE_DUMP = ChoobSetup.class.getResourceAsStream(DATABASE_DUMP_NAME);

	public ChoobSetup
		(
			final String databaseServer,
			final String databaseUserName,
			final String databasePassword,
			final String databaseName,
			final String botName,
			final String ircServer,
			final String ircChannel,
			final String rootUser
		) throws MissingFilesException
	{

		if (null == BOT_CONF_EXAMPLE)
			throw new MissingFilesException("bot.conf.example does not exist, check your source tree.");
		if (null == MINIMAL_DATABASE_DUMP)
			throw new MissingFilesException(DATABASE_DUMP_NAME + " does not exist, check your source tree.");

		checkParam(databaseServer, "Database Server must be specified.");
		checkParam(databaseUserName, "Database Username must be specified.");
		checkParam(databasePassword, "Database Password must be specified.");
		checkParam(databaseName, "Database name must be specified.");
		checkParam(botName, "The bot's name must be specified.");
		checkParam(ircServer, "The irc server to connect to must be specified.");
		checkParam(ircChannel, "The irc channel must be specified.");
		checkParam(rootUser, "The bot irc root user must be specified.");

		this.databaseServer = databaseServer;
		this.databaseUserName = databaseUserName;
		this.databasePassword = databasePassword;
		this.databaseName = databaseName;
		this.botName = botName;
		this.ircServer = ircServer;
		this.ircChannel = ircChannel;
		this.rootUser = rootUser;
	}

	public void setupChoob(final ChoobSetupStatus status) throws ChoobSetupException
	{
		try
		{
			createBotConfFromExample();
			status.onStatus(50, "Bot config created in " + BOT_CONF.getName() + ".  Going to import database..");
			setupDatabase();
			status.onStatus(100, "Database imported from " + DATABASE_DUMP_NAME + " successfully");
		} catch (final Exception ex)
		{
			throw new ChoobSetupException(ex);
		}
	}

	private void checkParam(final Object o, final String messageIfNotSet) throws IllegalArgumentException
	{
		if (o == null || o.toString().length() < 1)
			throw new IllegalArgumentException(messageIfNotSet);
	}


	private void createBotConfFromExample() throws IOException
	{

		final Properties botConfProperties = new Properties();
		botConfProperties.load(BOT_CONF_EXAMPLE);

		botConfProperties.setProperty("dbServer", databaseServer);
		botConfProperties.setProperty("dbUser", databaseUserName);
		botConfProperties.setProperty("database", databaseName);
		botConfProperties.setProperty("dbPass", databasePassword);
		botConfProperties.setProperty("botName", botName);
		botConfProperties.setProperty("server", ircServer);
		botConfProperties.setProperty("channels", ircChannel);

		final FileOutputStream fos = new FileOutputStream(BOT_CONF);
		try {
			botConfProperties.store(fos, "Autogenerated by ChoobSetup.");
			fos.flush();
		} finally {
			fos.close();
		}
	}

	private void setupDatabase() throws IOException, SQLException, ClassNotFoundException, InstantiationException,
			IllegalAccessException, MissingFilesException
	{
		final Connection conn = getConnection();
		try
		{
			createMinimalDatabaseCreationStatement(conn.createStatement()).executeBatch();
			putUserInRootGroup(createUserAndReturnId(rootUser,conn),conn);

		} finally
		{
			conn.close();
		}
	}

	private int createUserAndReturnId(final String userName, final Connection conn) throws SQLException
	{
		final PreparedStatement addUserStmt = conn.prepareStatement(ADD_USER_SQL, Statement.RETURN_GENERATED_KEYS);
		addUserStmt.setString(1, userName);
		addUserStmt.executeUpdate();
		final ResultSet idSet = addUserStmt.getGeneratedKeys();
		while (idSet.next())
		{
			return idSet.getInt(1);
		}
		throw new SQLException("Created user had no id");
	}

	private void putUserInRootGroup(final int userId, final Connection conn) throws SQLException
	{
		final PreparedStatement makeRootUserStmt = conn.prepareStatement(PUT_USER_INTO_ROOT_GROUP_SQL);
		makeRootUserStmt.setInt(1, userId);
		makeRootUserStmt.execute();
	}

	private Connection getConnection() throws SQLException, ClassNotFoundException, InstantiationException,
			IllegalAccessException
	{
		final String url = "jdbc:mysql://" + databaseServer + "/" + databaseName;
		Class.forName("com.mysql.jdbc.Driver").newInstance();
		return DriverManager.getConnection(url, databaseUserName, databasePassword);
	}

	private Statement createMinimalDatabaseCreationStatement(final Statement stmt) throws IOException,
			SQLException, MissingFilesException
	{
		try
		{
			StringBuilder builder = new StringBuilder();
			final BufferedReader reader = new BufferedReader(new InputStreamReader(MINIMAL_DATABASE_DUMP));
			String line;
			while ((line = reader.readLine()) != null)
			{
				line = line.replaceAll("--.*", ""); //remove comments.
				if (line.indexOf(";") != -1) //statement ends here.
				{
					builder.append("\n");
					builder.append(line);
					stmt.addBatch(builder.toString());
					builder = new StringBuilder();
				} else //statement continues
				{
					builder.append("\n");
					builder.append(line);
				}
			}
			return stmt;
		} catch (final FileNotFoundException ex)
		{
			//unlikely to happen, we checked earlier.
			throw new MissingFilesException(ex.getMessage());
		}

	}

	private final static String ADD_USER_SQL =
		"INSERT INTO " +
			"UserNodes" +
			"(" +
				"NodeName," +
				"NodeClass" +
			") " +
		"VALUES" +
			"(" +
				"?," +
				"0" +
			");";

	private final static String PUT_USER_INTO_ROOT_GROUP_SQL =
		"INSERT INTO " +
			"GroupMembers " +
			"(" +
				"GroupID," +
				"MemberID" +
			") " +
		"VALUES " +
			"(" +
				"1," +
				"?" +
			");";

	public class ChoobSetupException extends Exception
	{
		public ChoobSetupException(final String message)
		{
			super(message);
		}

		public ChoobSetupException(final Exception ex)
		{
			super(ex);
		}
	}

	public class MissingFilesException extends ChoobSetupException
	{
		public MissingFilesException(final String message)
		{
			super(message);
		}
	}

	public interface ChoobSetupStatus
	{
		public void onStatus(int percent, String message);
	}

}

