/* Generated By:JavaCC: Do not edit this line. ObjectDbClauseParser.java */
        package org.uwcs.choob.support;
        import java.util.Map;
        import java.util.List;
        import java.util.ArrayList;
        import java.util.HashMap;
        import java.util.Iterator;
        import java.io.StringReader;

        public class ObjectDbClauseParser implements ObjectDbClauseParserConstants {
                private int joins = 0;
                private List joinList = new ArrayList();
                private Map nameMap = new HashMap();
                private String sortOrder = "";
                private String limitTo = "";
                private List classList = new ArrayList();
                private Map classMap = new HashMap();
                private Map fieldClass = new HashMap();

                public static void main(String args[])
                {
                        try
                        {
                                for(int i=0; i<args.length; i++)
                                {
                                        System.out.println(getSQL(args[i], args[++i]));
                                }
                        }
                        catch (ParseException e)
                        {
                                System.out.println("Parse exception: " + e);
                                e.printStackTrace();
                        }
                }

                public static String getSQL(String clause, String className) throws ParseException {
                        if (className == null)
                                throw new IllegalArgumentException("Null class name passed to getSQL...");

                        ObjectDbClauseParser parser = new ObjectDbClauseParser (new StringReader(clause));

                        parser.classList.add(className);
                        parser.classMap.put(className, new Integer(0));

                        StringBuffer whereClause = new StringBuffer("("+parser.SQL()+")");
                        StringBuffer joinText = new StringBuffer();
                        for (int i=0; i<parser.classList.size(); i++)
                        {
                                String classN = (String)parser.classList.get(i);
                                joinText.append("ObjectStore s"+i+" INNER JOIN ");
                                whereClause.append(" && s"+i+".ClassName = \"" + classN + "\"");
                        }
                        for(int i=0; i<parser.joinList.size(); i++)
                        {
                                if (i != 0)
                                        joinText.append(" INNER JOIN ");
                                String fullName = (String)parser.joinList.get(i);
                                int pos = fullName.lastIndexOf('.');
                                String fieldName = fullName.substring(pos + 1);
                                joinText.append("ObjectStoreData o" + i + " ON s"+parser.fieldClass.get(fullName)+".ObjectID = o" + i + ".ObjectID AND o" + i + ".FieldName = \"" + fieldName + "\"");
                        }
                        return "SELECT s0.ClassID FROM " + joinText.toString() + " WHERE " + whereClause.toString() + parser.sortOrder + parser.limitTo;
                }

                public String getFieldName(String name) throws ParseException
                {
                        String fullName;
                        if (name.lastIndexOf('.') == -1)
                                fullName = classList.get(0) + "." + name;
                        else
                                fullName = name;

                        String realName = (String)nameMap.get(fullName.toLowerCase());
                        if (realName != null)
                                return realName;

                        // Need to add!
                        int pos = fullName.lastIndexOf('.');
                        String className = fullName.substring(0, pos);
                        String fieldName = fullName.substring(pos + 1);

                        Integer classID = (Integer)classMap.get(className);
                        if (classID == null)
                                throw new ParseException("Attempted to use a class not in a WITH clause...");

                        if (fieldName.equals("id"))
                                // Special case, no join required...
                                realName = "s"+classID+".ClassID";
                        else
                        {
                                realName = "o"+joinList.size()+".FieldValue";
                                joinList.add(fullName.toLowerCase());
                                fieldClass.put(fullName.toLowerCase(), classID);
                        }

                        nameMap.put(fullName.toLowerCase(), realName);
                        return realName;
                }

  final public String SQL() throws ParseException {
                String s;
                StringBuffer b = new StringBuffer();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
      case SORT:
      case LIMIT:
      case WITH:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WITH:
        jj_consume_token(WITH);
        ParseWith();

        break;
      case SORT:
        jj_consume_token(SORT);
        ParseSort();

        break;
      case LIMIT:
        jj_consume_token(LIMIT);
        ParseLimit();

        break;
      case WHERE:
        jj_consume_token(WHERE);
        s = ClauseList();
                          b.append(s);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                  {if (true) return b.toString();}
    throw new Error("Missing return statement in function");
  }

/*
	ClauseList() = Clause() ClauseExtra()
*/
  final public String ClauseExtra() throws ParseException {
                String s;
                StringBuffer t = new StringBuffer();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        s = Clause();
                                 t.append(" AND " + s);
        break;
      case OR:
        jj_consume_token(OR);
        s = Clause();
                                t.append(" OR " + s);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                        {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String ClauseList() throws ParseException {
                String s, t;
    s = Clause();
    t = ClauseExtra();
                        {if (true) return s + t;}
    throw new Error("Missing return statement in function");
  }

  final public String Clause() throws ParseException {
                java.util.Vector list;
                String s;
                Token t;
                int i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      s = Clause();
                        {if (true) return "NOT " + s;}
      break;
    case WHERE_NAME:
      t = jj_consume_token(WHERE_NAME);
      s = OperatorAndValue(t.image);
                        {if (true) return s;}
      break;
    case _OPENBRACKET:
      jj_consume_token(_OPENBRACKET);
      s = ClauseList();
      jj_consume_token(_CLOSEBRACKET);
                        {if (true) return "(" + s + ")";}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String OperatorAndValue(String name) throws ParseException {
                String realName = getFieldName(name);
                Token s, t;
                String n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMOP:
      s = jj_consume_token(NUMOP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _NUMVALUE:
        t = jj_consume_token(_NUMVALUE);
                                          n = t.image;
        break;
      case NUM_FIELDNAME:
        t = jj_consume_token(NUM_FIELDNAME);
                                              n = getFieldName(t.image);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        {if (true) return realName + " " + s.image + " " + n;}
      break;
    case GENOP:
      s = jj_consume_token(GENOP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _GENVALUE:
        t = jj_consume_token(_GENVALUE);
                                          n = t.image;
        break;
      case GEN_FIELDNAME:
        t = jj_consume_token(GEN_FIELDNAME);
                                              n = getFieldName(t.image);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        {if (true) return realName + " " + s.image + " " + n;}
      break;
    case RLIKE:
      jj_consume_token(RLIKE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _TEXTVALUE:
        t = jj_consume_token(_TEXTVALUE);
                                           n = t.image;
        break;
      case TEXT_FIELDNAME:
        t = jj_consume_token(TEXT_FIELDNAME);
                                               n = getFieldName(t.image);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        {if (true) return realName + " REGEXP " + n;}
      break;
    case LIKE:
      jj_consume_token(LIKE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _TEXTVALUE:
        t = jj_consume_token(_TEXTVALUE);
                                           n = t.image;
        break;
      case TEXT_FIELDNAME:
        t = jj_consume_token(TEXT_FIELDNAME);
                                               n = getFieldName(t.image);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        {if (true) return realName + " LIKE " + n;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void ParseSort() throws ParseException {
                Token t;
                String order = "ASC";
                String modpre = "";
                String modpost = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASC:
    case DESC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASC:
        jj_consume_token(ASC);

        break;
      case DESC:
        jj_consume_token(DESC);
                                 order = "DESC";
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      jj_consume_token(INTEGER);
                                    modpre = " CAST( "; modpost = " AS SIGNED) ";
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    t = jj_consume_token(SORT_NAME);
                        sortOrder = " ORDER BY " + modpre + getFieldName(t.image) + modpost + " " + order;
  }

  final public void ParseLimit() throws ParseException {
                Token t1, t2;
    jj_consume_token(LIMIT_OPENBRACKET);
    t1 = jj_consume_token(LIMIT_NUMVALUE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIMIT_COMMA:
      jj_consume_token(LIMIT_COMMA);
      t2 = jj_consume_token(LIMIT_NUMVALUE);
      jj_consume_token(LIMIT_CLOSEBRACKET);
                                limitTo = " LIMIT " + t1.image + ", " + t2.image;
      break;
    case LIMIT_CLOSEBRACKET:
      jj_consume_token(LIMIT_CLOSEBRACKET);
                                limitTo = " LIMIT " + t1.image;
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ParseWith() throws ParseException {
                Token t;
    t = jj_consume_token(WITH_NAME);
                        if (classMap.get(t.image) == null)
                        {
                                classMap.put(t.image, classList.size());
                                classList.add(t.image);
                        }
  }

  public ObjectDbClauseParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x1e00,0x1e00,0x60000,0x60000,0xe000,0x30000000,0xc0000000,0x0,0x0,0x0,0x180000,0x180000,0x200000,0x6000000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3c,0x0,0x0,0x0,0x0,};
   }

  public ObjectDbClauseParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ObjectDbClauseParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  public ObjectDbClauseParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ObjectDbClauseParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  public ObjectDbClauseParser(ObjectDbClauseParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  public void ReInit(ObjectDbClauseParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[38];
    for (int i = 0; i < 38; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

        }
